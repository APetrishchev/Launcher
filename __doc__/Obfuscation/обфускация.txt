Техническое задание.

Разработать программу упаковщик JavaScript-файлов.

Цели:
- сократить размер JavaScript-файлов для уменьшения объема трафика и повышения скорости загрузки при передаче их клиенту;
- ухудшить читабельность JavaScript-файлов для усложнения  процесса разбора кода неавторизованными пользователями.

Интерфейс: командная строка.

Язык программирования: PHP.

Описание задачи:
Интерпретатору PHP в командной строке передаются имя вызываемой программы с параметрами:

php.exe jspacker.php jsTrgFileName jsSrcFileName1.js [jsSrcFileName2.js jsSrcFileName3.js …], где

php.exe – программа интерпретатор PHP-кода,
jspacker.php – имя разрабатываемой в настоящем проекте программы,
jsTrgFileName – имя создаваемого результирующего файла,
jsSrcFileName1.js – имя исходного файла,
[jsSrcFileName2.js jsSrcFileName3.js …] – имена других исходных файлов

Параметры разделяются символом “пробел”.
1-й параметр - имя результирующего файла.
2-й и последующие параметры имена исходных JavaScript-файлов.
Расширения файлов могут быть любыми или отсутствовать.
Количество исходных файлов – один и более.
Исходные файлы не изменяются программой.

Исходные файлы объединяются и сохраняются в результирующем файле.
В результирующем файле:
- удаляются все блочные и потоковые комментарии;
- удаляются все переводы строки и лишние пробельные символы;
- имена всех функций и переменных заменяются на короткие и бессмысленные имена;
В процессе выполнения программы в поток стандартной ошибки выводятся сообщения о прохождении и завершении этапов работы и ошибках возникших в процессе обработки, например:

Исходный файл jsSrcFileName2.js не найден
Удаление блочных комментариев ….. завершено
Удаление потоковых комментариев ….. завершено.

После окончания обработки в поток стандартной ошибки выводятся данные о размерах результирующего файла до и после обработки содержимого и данные отношения размера файла после обработки к размеру до обработки в процентах.

Описание решения:
1. Создать новый файл с именем, переданным в первом параметре.
Если ошибка, вывести сообщение и завершить работу.

2. Если второй параметр отсутствует, вывести сообщение, завершить работу.
Открыть в режиме чтения файл с именем, переданным во втором параметре.
Если ошибка, вывести сообщение и перейти к п.3. 
Копировать содержимое этого файла в результирующий файл.

3. Если следующий параметр отсутствует перейти к п.4.
Открыть в режиме чтения файл с именем, переданным в следующем параметре.
Если ошибка, вывести сообщение и перейти к п.3. 
Копировать содержимое этого файла в результирующий файл и перейти к п.3.

4. Вывести сообщение “Удаление блочных комментариев …..”
.
.
.
Вывести сообщение “завершено\n”

5. Вывести сообщение “Удаление потоковых комментариев …..”
.
.
.
Вывести сообщение “завершено\n”





function thisIsMyBigNameFunction()
{
// она чегойта умеет делать
/* я сам не знаю чего */
var peremennaja;
alert(peremennaja)
} 

должно получиться так:
function f1(){var v1; alert(v1);} 

нельзя изменять ключевые слова и имена стандартных функций, пример: function, if, else, getElementById
переименовывать только функции определенные в этом файле 

убрать комментарии:
// до конца строки
/* между такими символами */
затем пробелы убрать где не нужны, и символы табуляции и перевода строки 

thisIsMyBigNameFunction переименовывается в f1
следующая в f2
