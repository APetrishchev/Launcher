#!/usr/bin/python
#-*- coding: utf-8 -*-
from __future__ import unicode_literals

import os, sys, re, datetime
from getpass import getpass
from pexpect import pxssh
from pexpect.pxssh import ExceptionPxssh

#*******************************************************************************
HOSTLIST = 'user.list'
INSTALL_LOG = 'user.log'
INSTALLER_USER = 'apetrishchev'
INSTALLER_PASSWD = 'Pr15rQk#23'
AGENT_USERGROUP = 'zabbix'
AGENT_USER = 'zabbix'
AGENT_PASSWD = '3edcVFR$'
AGENT_HOME_PATH = '/opt/zabbix'
AGENT_SHELL = '/bin/bash'

#*******************************************************************************
# Log
#*******************************************************************************
class Log():

  FILE = 1
  CONSOLE = 2
  NOCOLOR = 4
  COLOR = 8
  START_TIME = None
  RED = '\033[31m'
  GREEN = '\033[32m'
  WHITE = '\033[37m'
  HEADER1 = '='*80
  HEADER2 = '--- {:-<76}'
  ERR_HEADER = '{:^80s}'
  SUCCESS = 'OK'
  FAIL = 'FAIL'

  #*****************************************************************************
  # Log.__init__
  #*****************************************************************************
  def __init__(self, path=None, nocolor=NOCOLOR):
    self.enable = True
    self.behavior = nocolor
    self.behavior += Log.CONSOLE
    if path:
      self.behavior += Log.FILE
      self.logFile = open(path, 'w')
    Log.START_TIME = datetime.datetime.now()
    self.writeln('Started at {}'.format(Log.START_TIME.strftime('%Y-%m-%d %H:%M:%S')))
    Log.C_SUCCESS = self.green(Log.SUCCESS)
    Log.C_FAIL = self.red(Log.FAIL)
    WORK_DIR = os.path.dirname(__file__)
    self.HOSTLIST = os.path.join(WORK_DIR, HOSTLIST)
    self.INSTALL_LOG = os.path.join(WORK_DIR, INSTALL_LOG)

  #*****************************************************************************
  # Log.writeln
  #*****************************************************************************
  def writeln(self, *msgs, **kwargs):
    if not self.enable:
      return
    out = Log.FILE+Log.CONSOLE if not 'out' in kwargs else kwargs['out']
    if self.behavior&Log.FILE&out:
      for msg in msgs:
        self.logFile.write(('{}'.format(msg)).encode('utf-8'))
      self.logFile.write('\n'.encode('utf-8'))
    if self.behavior&Log.CONSOLE&out:
      for msg in msgs:
        sys.stdout.write('{}'.format(msg))
      sys.stdout.write('\n')
      sys.stdout.flush()

  #*****************************************************************************
  # Log.write
  #*****************************************************************************
  def write(self, msg, **kwargs):
    if not self.enable:
      return
    out = Log.FILE+Log.CONSOLE if not 'out' in kwargs else kwargs['out']
    if self.behavior&Log.FILE&out:
      self.logFile.write(msg.encode('utf-8'))
    if self.behavior&Log.CONSOLE&out:
      sys.stdout.write(msg)
      sys.stdout.flush()

  #*****************************************************************************
  # Log.red
  #*****************************************************************************
  def red(self, msg):
    if self.behavior&self.COLOR:
      msg = '{}{}{}'.format(Log.RED, msg, Log.WHITE)
    return msg

  #*****************************************************************************
  # Log.green
  #*****************************************************************************
  def green(self, msg):
    if self.behavior&self.COLOR:
      msg = '{}{}{}'.format(Log.GREEN, msg, Log.WHITE)
    return msg

  #*****************************************************************************
  # Log.header1
  #*****************************************************************************
  def header1(self, **kwargs):
    self.writeln(Log.HEADER1, **kwargs)

  #*****************************************************************************
  # Log.header2
  #*****************************************************************************
  def header2(self, msg, **kwargs):
    self.writeln(Log.HEADER2.format(msg), **kwargs)

  #*****************************************************************************
  # Log.errHeader
  #*****************************************************************************
  def errHeader(self, **kwargs):
    self.writeln(Log.ERR_HEADER.format('.'*72), **kwargs)

  #*****************************************************************************
  # Log.success
  #*****************************************************************************
  def success(self, message=None, **kwargs):
    if not self.enable:
      return
    out = Log.FILE+Log.CONSOLE if not 'out' in kwargs else kwargs['out']
    if self.behavior&Log.FILE&out:
      msg = message if message else Log.SUCCESS
      self.logFile.write('{}\n'.format(msg))
    if self.behavior&Log.CONSOLE&out:
      msg = self.green(message) if message else Log.C_SUCCESS
      sys.stdout.write('{}\n'.format(msg))
      sys.stdout.flush()

  #*****************************************************************************
  # Log.fail
  #*****************************************************************************
  def fail(self, message=None, **kwargs):
    if not self.enable:
      return
    out = Log.FILE+Log.CONSOLE if not 'out' in kwargs else kwargs['out']
    if self.behavior&Log.FILE&out:
      msg = message if message else Log.FAIL
      self.logFile.write('{}\n'.format(msg))
    if self.behavior&Log.CONSOLE&out:
      msg = self.red(message) if message else Log.C_FAIL
      sys.stdout.write('{}\n'.format(msg))
      sys.stdout.flush()

  #*****************************************************************************
  # Log.err
  #*****************************************************************************
  def err(self, msg, **kwargs):
    if not self.enable:
      return
    self.errHeader()
    self.fail(msg, **kwargs)
    self.errHeader()

  #*****************************************************************************
  # Log.close
  #*****************************************************************************
  def close(self):
    finishTime = datetime.datetime.now()
    self.writeln('Finished at {} ({})\n'.format(
      finishTime.strftime('%Y-%m-%d %H:%M:%S'),
      finishTime-Log.START_TIME
    ))
    if self.behavior&Log.FILE:
      self.logFile.close()


#*******************************************************************************
# ExceptionRemote
#*******************************************************************************
class ExceptionRemote(Exception):

  #*****************************************************************************
  # ExceptionRemote.__init__
  #*****************************************************************************
  def __init__(self, msg):
    self.errMsg = msg

#*******************************************************************************
# Remote
#*******************************************************************************
class Remote(pxssh.pxssh):
  PLAIN_PROMPT = '[#$]'
  INSTALLER_USER = None if not 'INSTALLER_USER' in globals() else INSTALLER_USER
  INSTALLER_PASSWD = None if not 'INSTALLER_PASSWD' in globals() else INSTALLER_PASSWD

  #*****************************************************************************
  # Remote.auth
  #*****************************************************************************
  @staticmethod
  def auth():
    if not Remote.INSTALLER_PASSWD:
      if not Remote.INSTALLER_USER:
        Remote.INSTALLER_USER = raw_input('Username: ')
      else:
        print 'Username: {}'.format(Remote.INSTALLER_USER)
      Remote.INSTALLER_PASSWD = getpass('Password: ')

  #*****************************************************************************
  # Remote.connect
  #*****************************************************************************
  @staticmethod
  def connect(hostIp):
    rmt = Remote(hostIp, Remote.INSTALLER_USER, Remote.INSTALLER_PASSWD, True)
    rmt.systemd = rmt.chkSystemd()
    return rmt

  #*****************************************************************************
  # Remote.__init__
  #*****************************************************************************
  def __init__(self, host, user, passwd, sudo=False):
    super(Remote, self).__init__(timeout=5)
    self.sudo = sudo
    self.login(host, user, passwd)
    if sudo:
      self.sendline('sudo -s')
      idx = self.expect([('[sudo] .* {}:'.format(user)).encode('utf-8'), self.PROMPT], timeout=5)
      if idx == 0:
        self.sendline(passwd)
        idx = self.expect([Remote.PLAIN_PROMPT, '.*is not in the sudoers file.*'], timeout=5)
        if idx > 0:
          raise Exception('{} is not in the sudoers file on {}'.format(user, host))
        if not self.set_unique_prompt():
          self.close()
          raise ExceptionPxssh(
            'could not set shell prompt '
            '(received: {}, expected: {}).'.format(self.before, self.PROMPT)
          )
    self.result = ''
    self.errCode = None

  #*****************************************************************************
  # Remote.execute
  #*****************************************************************************
  def execute(self, cmd, **kwargs):
    self.sendline(cmd+'; echo $?;')
    self.prompt()
    result = self.before.decode('utf-8')
    #print 'Before(raw):', self.before
    #print 'Before:', result
    #print 'After:', self.after
    result = result.replace('\r', '').split('\n')
    self.command = cmd
    self.result = result[1:-2]
    try:
      self.errCode = int(result[-2].strip())
    except ValueError, exc:
      self.errCode = -1
    return self.result

  #*****************************************************************************
  # Remote.err
  #*****************************************************************************
  @property
  def err(self):
    msg = [
      '    Command: {}'.format(self.command),
      '    Retcode: {}'.format(self.errCode),
      '    Result:'
    ]
    for ln in self.result:
      msg.append('      {}'.format(ln))
    return '\n'.join(msg)

  #*****************************************************************************
  # Remote.exit
  #*****************************************************************************
  def exit(self):
    if self.sudo:
      self.execute('exit')
    self.logout()

  #*****************************************************************************
  # Remote.chkSystemd
  #*****************************************************************************
  def chkSystemd(self):
    '''проверяет systemd'''
    self.execute('systemctl --version')
    if self.errCode == 0:
      return True
    return False

  #*****************************************************************************
  # Remote.addUsergroup
  #*****************************************************************************
  def addUsergroup(self, group):
    '''добавляет пользовательскую группу'''
    self.execute('groupadd {}'.format(group))
    return self.errCode

  #*****************************************************************************
  # Remote.addUser
  #*****************************************************************************
  def addUser(self, usr, home, sh, grp):
    '''добавляет пользователя'''
    self.execute(
      'useradd -d{home} -m -s{sh} -g {grp} {usr}'.format(
        home = home,
        sh = sh,
        grp = grp,
        usr = usr
      )
    )
    return self.errCode

  #*****************************************************************************
  # Remote.passwd
  #*****************************************************************************
  def passwd(self, usr, password):
    '''добавляет пароль пользователя'''
    self.execute('passwd {}'.format(usr))
    return self.errCode

  #*****************************************************************************
  # Remote.chgUser
  #*****************************************************************************
  def chgUser(self, usr, home, sh):
    '''изменяет данные пользователя'''
    self.execute(
      'usermod -d{home} -m -s{sh} {usr}'.format(
        home = home,
        sh = sh,
        usr = usr
      )
    )

  #*****************************************************************************
  # Remote.mkDir
  #*****************************************************************************
  def mkDir(self, dir_):
    '''создает директорию'''
    self.execute(
      '[[ ! -f "{dir}" ]] && mkdir -p {dir}'.format(
        dir = os.path.join(dir_)
      )
    )


#*******************************************************************************
# addUser
#*******************************************************************************
def addUser(host, log):
  try:
    log.header2('Host {} '.format(host))
    result = re.match(r'([0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3})', host)
    if result:
      hostIp = result.group(1)
    else:
      log.writeln('  Check IP ... ', Log.C_FAIL)
      return 1

    rmt = Remote.connect(hostIp)
    excMsg = 'User added ... '
    #---------------------------------------------------------------------------
    # создать usergroup AGENT_USERGROUP
    log.write('  Create usergroup "{}" ... '.format(AGENT_USERGROUP))
    retcode = rmt.addUsergroup(AGENT_USERGROUP)
    if retcode == 0:
      log.success()
    elif retcode == 9:
      log.success('exists')
    else:
      log.fail()
      raise ExceptionRemote(rmt.err)

    #---------------------------------------------------------------------------
    # создать AGENT_USER
    log.write('  Create user "{}" ... '.format(AGENT_USER))
    retcode = rmt.addUser(
      usr = AGENT_USER,
      home = AGENT_HOME_PATH,
      sh = '/bin/bash',
      grp = AGENT_USERGROUP
    )
    if retcode == 0:
      log.success()
      # установить пароль
      log.write('    Set users password ... ')
      retcode = rmt.passwd(AGENT_USER, AGENT_PASSWD)
      if retcode == 0:
        log.success()
      else:
        log.fail()
        raise ExceptionRemote(rmt.err)
    elif retcode == 9:
      log.success('exists')
      log.write('  Change home dir to "{}" and shell to "{}" for user ... '.format(
        AGENT_HOME_PATH,
        AGENT_SHELL
      ))
      rmt.chgUser(
        usr = AGENT_USER,
        home = AGENT_HOME_PATH,
        sh = AGENT_SHELL
      )
      log.success()
    else:
      log.fail()
      raise ExceptionRemote(rmt.err)

    #---------------------------------------------------------------------------
    # создать, если не существует, папку AGENT_HOME_PATH
    rmt.mkDir(AGENT_HOME_PATH)
    if rmt.errCode != 0:
      log.fail()
      raise ExceptionRemote(rmt.err)

    #-----------------------------------------------------------------------------
    rmt.close()
    log.writeln(excMsg, Log.C_SUCCESS)
    return 0

  #-----------------------------------------------------------------------------
  except ExceptionRemote, exc:
    log.err(exc.errMsg)
    log.writeln(excMsg, Log.C_FAIL)
    rmt.close()
    return 1

#*******************************************************************************
# cmdAddUser
#*******************************************************************************
def cmdAddUser(host=None):
  Remote.auth()
  log = Log(self.INSTALL_LOG, Log.COLOR)
  log.header1()
  total = 0
  fail = 0
  err = 0
  if host:
    err = addUser(host, log)
    fail += err
    total += 1
  else:
    listFilePath = self.HOSTLIST
    tmpListFilePath = '{}.tmp'.format(self.HOSTLIST)
    with open(listFilePath, 'r') as listFile, open(tmpListFilePath, 'w') as tmpListFile:
      host = listFile.readline()
      while host:
        host = host.decode('utf-8').strip()
        if host == '' or host.find('#') == 0 or host.find(';') == 0:
          tmpListFile.write(('{}\n'.format(host)).encode('utf-8'))
          host = listFile.readline()
          continue
        err = addUser(host, log)
        if err:
          tmpListFile.write(('{}\n'.format(host)).encode('utf-8'))
        else:
          tmpListFile.write((';{}\n'.format(host)).encode('utf-8'))
        fail += err
        total += 1
        host = listFile.readline()
    os.rename(tmpListFilePath, listFilePath)
  log.writeln()
  log.header1()
  log.writeln('Processed failed: {}  total: {}'.format(
    log.red(fail) if fail > 0 else log.green(fail),
    log.green(total)
  ))
  log.close()
  return 0 if fail == 0 else 1


#*******************************************************************************
# __main__
#*******************************************************************************
if __name__ == "__main__":
  sys.exit(cmdAddUser(*sys.argv[1:]))
